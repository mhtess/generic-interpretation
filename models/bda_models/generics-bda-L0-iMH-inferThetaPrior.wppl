// time ~/tools/webppl-fork/webppl generics-bda-L0-iMH-inferThetaPrior.wppl --require utils uncertain 1
// time webppl generics-bda-L0-iMH-inferThetaPrior.wppl --require utils --require ~/tools/webppl-sample-writer-fork/ uncertain 1
// time webppl bda_models/generics-bda-L0-iMH-inferThetaPrior.wppl --require ./node_modules/utils --require ~/tools/webppl-sample-writer-fork uncertain 1

var chain = last(process.argv) // load index as last command line index

// penultimate argument is the semantics
// uncertain = uncertain threshold
// fixed = fixed threshold at lowest threshold value
var semantics = process.argv[process.argv.length - 2]
// console.log(semantics)
var priorFilePrefix = "prior-3",
    // priorFilePrefix = "prior-manipulation-3",
    interpretationFilePrefix = "interpretation-6",
    endorsementFilePrefix = "endorsement-1";

// expt 2: measured priors
var d_prior = readDataFile("expt1a-prior"),
    d_prior_catch = readCatchFile("expt1a-prior"),
    d_prior_subj = readSubjFile("expt1a-prior"),
    d_interpretation = readDataFile("expt1b-interpretation"),
    d_interpretation_catch = readCatchFile("expt1b-interpretation"),
    d_interpretation_subj = readSubjFile("expt1b-interpretation");
    // d_endorsement = readDataFile("endorsement", endorsementFilePrefix),
    // d_endorsement_catch = readCatchFile("endorsement", endorsementFilePrefix),
    // d_endorsement_subj = readSubjFile("endorsement", endorsementFilePrefix);

// expt 3: Prior manipulation
// var d_prior = readDataFile("prior-manipulation", priorFilePrefix),
//     d_prior_catch = readCatchFile("prior-manipulation", priorFilePrefix),
//     d_prior_subj = readSubjFile("prior-manipulation", priorFilePrefix),
//     d_interpretation = readDataFile("prior-manipulation", interpretationFilePrefix),
//     d_interpretation_catch = readCatchFile("prior-manipulation", interpretationFilePrefix),
//     d_interpretation_subj = readSubjFile("prior-manipulation", interpretationFilePrefix);

var priorWorkeridsPassed = passCatchTrials(d_prior_catch),
    interpretationWorkeridsPassed = passCatchTrials(d_interpretation_catch),
    // endorsementWorkeridsPassed = passCatchTrials(d_endorsement_catch),
    priorWorkeridsEnglish = nativeEnglish(d_prior_subj),
    interpretationWorkeridsEnglish = nativeEnglish(d_interpretation_subj);
    // endorsementWorkeridsEnglish = nativeEnglish(d_endorsement_subj);

var data = {
	prior: filter(function(di){
    return ((priorWorkeridsPassed.indexOf(di.workerid) > -1) &&
      (priorWorkeridsEnglish.indexOf(di.workerid) > -1) &&
      utils.isNumber(di.response) &&
      di.trial_type == "prevalence_elicitation")
  }, map(function(d){ return extend(d, {
		avoided_endval: avoidEnds(d.response)
  })}, d_prior)),
	interpretation: filter(function(di){
    return ((interpretationWorkeridsPassed.indexOf(di.workerid) > -1) &&
      (interpretationWorkeridsEnglish.indexOf(di.workerid) > -1) &&
      utils.isNumber(di.response) &&
      di.trial_type == "implied_prevalence")
  }, map(function(d){ return extend(d, {
		binnedResponse:  utils.closest( midBins.slice(1), d.response)
	})}, d_interpretation))//,
  // endorsement: filter(function(di){
  //   return ((endorsementWorkeridsPassed.indexOf(di.workerid) > -1) &&
  //     (endorsementWorkeridsEnglish.indexOf(di.workerid) > -1) &&
  //     utils.isNumber(di.response) &&
  //     di.trial_type == "truth_conditions")
  // }, map(function(d){ return extend(d, {
  //   binned_prevalence:  utils.closest( midBins, d.prevalence_level / 100)
  // })}, d_endorsement))
};


// var prevalence_levels = map(function(x){ utils.closest(midBins, x) }, [0.1,0.3,0.5,0.7,0.9])

// // // test that removing Ss who failed catch trial works properly (computed in R)
assert.ok(levels(data.interpretation, "workerid").length == 132)
// assert.ok(levels(data.interpretation, "workerid").length == 107)
// assert.ok(levels(data.prior, "workerid").length == 131)
// assert.ok(levels(data.prior, "workerid").length == 126) // prior 3
assert.ok(levels(data.prior, "workerid").length == 175) // prior 3 n200
// assert.ok(levels(data.endorsement, "workerid").length == 150) // endorsement 1

var utterancePrior = Infer({model: function(){
	return uniformDraw(["generic", "silence"])
}});

var meaning = function(utt,state, theta) {
  return utt=="generic"? state > theta :
         utt=="generic is false"? state<=theta :
         utt=='silence'? true :
         utt=='some'? state > 0 :
         true
}
//
var properties = levels(data.interpretation, "property");
var nullParams = {a:1, b:100}, nullDistribution = Beta(nullParams);
// properties

var addNoise = function(dist, noise){
  return Infer({model: function(){
    return flip(noise) ? uniformDraw(midBins) : sample(dist)
  }})
}

var fixedThreshold = (semantics == "some") ?_.min( thetaBins) :
  (semantics == "most") ? 0.5 :
  false

var discreteKernel = function(prevVal) {
  return Poisson({mu: prevVal + 1});
};

var model = function(){

  var noise = (semantics == "most") ? uniformDrift({a: 0, b: 1, width:0.2}) : 0

  var numberOfComponents = 2;//poisson(1) + 1;

	var theta_mean = uniformDrift({a: 0, b: 1, width:0.2})
	var theta_concentration = exponential({a: 1})// uniformDrift({a: 0, b: 50, width:2})

	var thetaParams = {
		a: theta_mean * theta_concentration,
		b: (1 - theta_mean) * theta_concentration
	}

	var nonuniform_ThetaPrior = Categorical({
      vs: thetaBins,
      ps: map2(function(b1, b2){
        return utils.betaCDF(b2, thetaParams) -
        utils.betaCDF(b1, thetaParams)
      }, midBins.slice(0, midBins.length-1),
        midBins.slice(1))
	 })


  foreach(properties, function(item){
    // display(item)
    var propertyData = {
        prior: _.filter(data.prior, {property: item}),
        interpretation: _.filter(data.interpretation, {property: item})
    };

		var weight = uniformDrift({a: 0, b: 1, width:0.2})
		var weights = [weight, 1 - weight]

    var componentParameters = repeat(numberOfComponents,
     function(){
      return betaShape({
          g: uniformDrift({a: 0, b: 1, width: 0.2}),
					d: exponential({a: 1})
        })
    })

  	mapData({data: propertyData.prior}, function(d){
      var componentLogLikelihood = map2(function(w, params){
        Math.log(w) + Beta(params).score(d.avoided_endval)
      }, weights, componentParameters)
      var scr = util.logsumexp(componentLogLikelihood)
      scr == -Infinity ? displayObj(d) : null
      // display(scr)
  		factor(scr)
  	})

    foreach(_.range(numberOfComponents), function(i){

      query.add(["componentParameters", item, i, "weight"],
        weights[i]
      )
      query.add(["componentParameters", item, i, "alpha"],
        componentParameters[i]["a"]
      )

      query.add(["componentParameters", item, i, "beta"],
        componentParameters[i]["b"]
      )
    })

  	var statePrior = Infer({model: function(){
      sample(DiscretizedBeta(componentParameters[discrete(weights)]))
  	}});

    // display(n_obs)
  	/// RSA model
  	var listener0 = Infer({model: function(){
				var theta = sample(nonuniform_ThetaPrior);
  	    var state = sample(statePrior);
				condition(state > theta)
  	    return state
  	 }})

  var L0 = listener0
  var interpretationPrediction = addNoise(L0, noise)

   mapData({data:propertyData.interpretation}, function(d){
     // display(d)
     var scr = interpretationPrediction.score(d.binnedResponse)
     scr == -Infinity ? displayObj(d) : null
     // display(scr)
     observe(interpretationPrediction, d.binnedResponse)
   })

   var supp = interpretationPrediction.support()

   foreach(supp, function(s){
     query.add(["prediction", item, "postDist", s], Math.exp(interpretationPrediction.score(s)))
		 query.add(["prediction", item, "priorDist", s], Math.exp(statePrior.score(s)))
   })

   // var speaker1 = function(state, speakerOptimality) {
   //  Infer({model: function(){
   //    var utterance = sample(utterancePrior);
   //    var L0 = listener0(utterance);
   //    factor(speakerOptimality * L0.score(state))
   //    return utterance
   //  }})}

    // foreach([1, 5, 10], function(speakerOptimality){

    //  foreach(prevalence_levels, function(p){

    //    var endorsement = speaker1(p, speakerOptimality)

    //    query.add(["endorsement", item, speakerOptimality, p], Math.exp(endorsement.score("generic")))

    //  })

    // })

   // query.add(["prediction", item, "prior", "posterior"], [expectation(statePrior), expectation(interpretationPrediction)])
 })

   // RECORD PARAMETERS AND PREDICTIVES
   // query.add("numberOfComponents", [-99, -99, -99, numberOfComponents])
   // semantics == "most" ? query.add(["noise", -99, -99, -99], noise) : null
	 query.add(["parameter", "theta", "prior", "mean"], theta_mean)
	 query.add(["parameter", "theta", "prior", "concentration"], theta_concentration)
	 // query.add(["theta_mean", -99, -99, -99], theta_mean)

	return query
}


// data.endorsement
// var totalIterations = 500, lag =  1;
// var totalIterations = 500000, lag =  250;
// var totalIterations = 100000, lag =  100;
// var totalIterations = 5000, lag =  5;
var totalIterations = 1000000, lag = 1000;
// var totalIterations = 10000, lag =  5;
var samples = totalIterations/lag, burn = totalIterations / 2;

// var outfile = 'results-genint-S1-endorsePrediction-int6-prior3-3Components_'+semantics+'-semantics_'+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'
// var outfile = 'results-genint-L0-fullDist-int6-prior3n200-3Components_'+semantics+'-semantics_'+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'
var outfile = 'results-genint-L0inferTheta-fullDist-int6-prior3n200-2Components_'+semantics+'-semantics_'+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'

var header = "iter,type,param,property,category,val,score"
var callback = webpplSampleWriter.streamQueryCSV("results/" + outfile, header);

// In practice this would be combined with onlyMAP inference option to
// avoid holding all samples in memory.

Infer({model,
      samples: samples, burn: burn, lag: lag,
       method: 'incrementalMH',
       onlyMAP: true,
       verbose: T,
       verboseLag: totalIterations / 20,
       callbacks: [callback]});

"written to " + outfile;
