var responseDictionary = { "agree-key": 1, "disagree-key": 0 };
var eps = Number.EPSILON;

var removeExtraRow = function(lst){
  return lst.slice(0, lst.length - 1)
}

var roundTo3 = function(x){
  return Math.round(x * 10000) / 10000
}
var exp = function(x){ return Math.exp(x); };

var probability = function(Dist, x) {
    return exp(Dist.score(x));
}

var lowerBins = [
	0,0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,
  0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99
];

var upperBins = [
  0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,
  0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99, 1
];

var midBins = map2(function(b1,b2){
  return roundTo3((b2 - b1)/2 + b1)
}, lowerBins, upperBins)

var thetaBins = map2(function(b1, b2){
  return roundTo3((b2-b1)/2 + b1);
}, midBins.slice(0, midBins.length-1), midBins.slice(1))

var DiscretizedBeta = function(betaParams){
	return Categorical({
      vs: midBins,
      ps: map2(function(b1, b2){
        return eps + utils.betaCDF(b2, betaParams) -
        utils.betaCDF(b1, betaParams)
      }, lowerBins, upperBins)
    })
}

var thetaPrior = Categorical({
          vs: thetaBins,
          ps: map2(function(b1, b2){
            return utils.betaCDF(b2, {a:1,b:1}) -
            utils.betaCDF(b1, {a:1,b:1})
          }, midBins.slice(0, midBins.length-1),
            midBins.slice(1))
  })

var betaShape = function(p){
  return {a: p.g * p.d, b: (1-p.g) * p.d}
};


var avoidEnds = function(response){
    return response==0 ? 0.001 : response==1 ? 0.999 : response
}

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var levels = function(df, label){
  return _.uniq(_.map(df, label));
}

var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};

var dataFrame = function(d, fieldsToNumerify){
    return removeExtraRow(map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1)))
}

var displayObj = function(x){ display(JSON.stringify(x)) }


var dataPath = "../data/";


var readDataFile = function(fileType, filePrefix){
  var fileName = dataPath + fileType + "/"+filePrefix+"/"+filePrefix+"-trials.csv";
  return dataFrame(utils.readCSV(fileName).data, ["workerid","response", "prevalence_level"])
}

var readCatchFile = function(fileType, filePrefix){
  var fileName = dataPath + fileType + "/"+filePrefix+"/"+filePrefix+"-catch_trials.csv";
  return dataFrame(utils.readCSV(fileName).data, ["workerid", "tested_on", "correct"])
}

var readSubjFile = function(fileType, filePrefix){
  var fileName = dataPath + fileType + "/"+filePrefix+"/"+filePrefix+"-subject_information.csv";
  return dataFrame(utils.readCSV(fileName).data, ["workerid"])
}

var passCatchTrials = function(df){
  var workerids = levels(df, "workerid");
  return filter(function(workerid){
    var subjCatchTrials = _.filter(df, {workerid: workerid});
    return all(function(tested_on){
      // check that at least 4 out of 5 correct rejections and 4 out of 5 hits
      return sum(_.map(_.filter(subjCatchTrials, {tested_on: tested_on}), "correct")) >= 4
    }, [0,1])
  }, workerids)
}

var passCatchPriorManipTrials = function(df){
  var workerids = levels(df, "workerid");
  return filter(function(workerid){
    var subjCatchTrials = _.filter(df, {workerid: workerid});
    return subjCatchTrials[0].pass_both == 1;
  }, workerids)
}


var nativeEnglish = function(df){
  var workerids = levels(df, "workerid");
  return filter(function(workerid){
    var subjInfo = _.filter(df, {workerid: workerid});
    return subjInfo[0]["language"].toLowerCase().indexOf("eng") > -1
  }, workerids)
}
